package PaqueteNomina;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import static java.awt.PageAttributes.MediaType.C;
import java.io.BufferedReader;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Scanner;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author zuzu-ai
 */

public class Generación_Nomina extends javax.swing.JFrame {
    /**
     * Crea un objeto de tipo AccesoAleatorioN para poder utilizar sus funciones.
     */
    AccesoAleatorioN aleatorio=new AccesoAleatorioN();
        /**
     * Las advertensias se inicializan como invisibles. Se activan solo si el usuario inclumple parámetros establecidos.
     */
    public Generación_Nomina() {
        initComponents();
        lblIngreseNum.setVisible(false);
        lblIngreseNum1.setVisible(false);
        lblIngreseNum2.setVisible(false);
        lblIngreseNum.setVisible(false);
        lblIngreseNum4.setVisible(false);
        lblIngreseNum5.setVisible(false);
        advertencia.setVisible(false);
        txtBonificacionIncentivo.setText("250.00");txtIsr.setText("0");
            /**
     * Redondea las variables de tipo float
     */
        DecimalFormat formato1 = new DecimalFormat("#.00");
        
        
    /**
     * Actualiza los datos en el combobox Departamento.
     */
                int registros=1000;
        FileReader fr;
        try {
            fr = new FileReader("Departamentos.txt");
            BufferedReader bf=new BufferedReader(fr);
           for(int i=0;i<registros;i++){
            String dato= bf.readLine();
            cmbxDepartamento.addItem(dato);
            i=i++;
           } 
            
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
        
           /**
     * Actualiza los datos en el combobox Nombre Empleado.
     */
        try {
            fr = new FileReader("NombreEmpleados.txt");
            BufferedReader bf=new BufferedReader(fr);
           for(int i=0;i<registros;i++){
            String dato= bf.readLine();
            cmbxNombreEmpleado.addItem(dato);
            i=i++;
           } 
            
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
        
            /**
     * Actualiza los datos en el combobox Puesto.
     */
        try {
            fr = new FileReader("Puestos.txt");
            BufferedReader bf=new BufferedReader(fr);
           for(int i=0;i<registros;i++){
            String dato= bf.readLine();
            cmbxPuesto.addItem(dato);
            i=i++;
           } 
            
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIngresodeDatos = new javax.swing.JLabel();
        lblGeneraciondePlanilla = new javax.swing.JLabel();
        cmbxDepartamento = new javax.swing.JComboBox<>();
        lblDepartamento = new javax.swing.JLabel();
        lblPuesto = new javax.swing.JLabel();
        cmbxPuesto = new javax.swing.JComboBox<>();
        lblNombreEmpleado = new javax.swing.JLabel();
        cmbxNombreEmpleado = new javax.swing.JComboBox<>();
        lblSueldoBase = new javax.swing.JLabel();
        txtSueldoBase = new javax.swing.JTextField();
        txtComisiones = new javax.swing.JTextField();
        lblComisiones = new javax.swing.JLabel();
        lblBonificacionesExtra = new javax.swing.JLabel();
        txtBonificacionesExtra = new javax.swing.JTextField();
        lblBonificacionIncentivo = new javax.swing.JLabel();
        txtBonificacionIncentivo = new javax.swing.JTextField();
        lblSueldoDevengado = new javax.swing.JLabel();
        txtSueldoDevengado = new javax.swing.JTextField();
        lblIgss = new javax.swing.JLabel();
        txtIgss = new javax.swing.JTextField();
        lblIsr = new javax.swing.JLabel();
        txtIsr = new javax.swing.JTextField();
        txtAnticipos = new javax.swing.JTextField();
        lblAnticipos = new javax.swing.JLabel();
        lblDescuentosJ = new javax.swing.JLabel();
        txtDescuentosJ = new javax.swing.JTextField();
        lblOtrosDescuentos = new javax.swing.JLabel();
        txtOtrosDescuentos = new javax.swing.JTextField();
        lblCalculodeIngresos = new javax.swing.JLabel();
        lblCalculodeDescuentos = new javax.swing.JLabel();
        lblTotalDescuentos = new javax.swing.JLabel();
        txtTotalDescuentos = new javax.swing.JTextField();
        lblTotalDescuentos1 = new javax.swing.JLabel();
        txtSueldoLiquido = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        lblFormadePago = new javax.swing.JLabel();
        cmbxFormadePago = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TbPreNomina = new javax.swing.JTable();
        lblIngreseNum1 = new javax.swing.JLabel();
        lblIngreseNum2 = new javax.swing.JLabel();
        lblIngreseNum = new javax.swing.JLabel();
        lblIngreseNum4 = new javax.swing.JLabel();
        lblIngreseNum5 = new javax.swing.JLabel();
        IngresarEmpleado = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Limpiar = new javax.swing.JButton();
        advertencia = new javax.swing.JLabel();
        lblIngreseNum6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generación de Nómina");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblIngresodeDatos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblIngresodeDatos.setText("Ingreso de Datos");
        getContentPane().add(lblIngresodeDatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        lblGeneraciondePlanilla.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblGeneraciondePlanilla.setText("Generación de Planilla");
        getContentPane().add(lblGeneraciondePlanilla, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 11, -1, -1));

        cmbxDepartamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxDepartamentoActionPerformed(evt);
            }
        });
        getContentPane().add(cmbxDepartamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 123, 120, -1));

        lblDepartamento.setText("Departamento:");
        getContentPane().add(lblDepartamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 103, 104, -1));

        lblPuesto.setText("Puesto:");
        getContentPane().add(lblPuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 103, 104, -1));

        getContentPane().add(cmbxPuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 123, 120, -1));

        lblNombreEmpleado.setText("Nombre Empleado:");
        getContentPane().add(lblNombreEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(321, 103, 104, -1));

        cmbxNombreEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxNombreEmpleadoActionPerformed(evt);
            }
        });
        cmbxNombreEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbxNombreEmpleadoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbxNombreEmpleadoKeyReleased(evt);
            }
        });
        getContentPane().add(cmbxNombreEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(321, 123, 120, -1));

        lblSueldoBase.setText("Sueldo Base:");
        getContentPane().add(lblSueldoBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, -1, -1));

        txtSueldoBase.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtSueldoBaseInputMethodTextChanged(evt);
            }
        });
        txtSueldoBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSueldoBaseActionPerformed(evt);
            }
        });
        txtSueldoBase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSueldoBaseKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSueldoBaseKeyTyped(evt);
            }
        });
        getContentPane().add(txtSueldoBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 120, 120, -1));

        txtComisiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtComisionesActionPerformed(evt);
            }
        });
        txtComisiones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtComisionesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtComisionesKeyTyped(evt);
            }
        });
        getContentPane().add(txtComisiones, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 216, 120, -1));

        lblComisiones.setText("Comisiones:");
        getContentPane().add(lblComisiones, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 196, 104, -1));

        lblBonificacionesExtra.setText("Bonificaciones Extra:");
        getContentPane().add(lblBonificacionesExtra, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 196, 104, -1));

        txtBonificacionesExtra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBonificacionesExtraActionPerformed(evt);
            }
        });
        txtBonificacionesExtra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBonificacionesExtraKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBonificacionesExtraKeyTyped(evt);
            }
        });
        getContentPane().add(txtBonificacionesExtra, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 216, 120, -1));

        lblBonificacionIncentivo.setText("Bonificacion Incentivo:");
        getContentPane().add(lblBonificacionIncentivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 196, -1, -1));

        txtBonificacionIncentivo.setEditable(false);
        txtBonificacionIncentivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBonificacionIncentivoActionPerformed(evt);
            }
        });
        getContentPane().add(txtBonificacionIncentivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 216, 120, -1));

        lblSueldoDevengado.setText("Sueldo Devengado:");
        getContentPane().add(lblSueldoDevengado, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 196, 104, -1));

        txtSueldoDevengado.setEditable(false);
        txtSueldoDevengado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSueldoDevengadoActionPerformed(evt);
            }
        });
        getContentPane().add(txtSueldoDevengado, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 216, 120, -1));

        lblIgss.setText("IGSS:");
        getContentPane().add(lblIgss, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 312, 104, -1));

        txtIgss.setEditable(false);
        txtIgss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIgssActionPerformed(evt);
            }
        });
        txtIgss.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIgssKeyReleased(evt);
            }
        });
        getContentPane().add(txtIgss, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 332, 112, -1));

        lblIsr.setText("ISR:");
        getContentPane().add(lblIsr, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 312, 104, -1));

        txtIsr.setEditable(false);
        txtIsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIsrActionPerformed(evt);
            }
        });
        txtIsr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIsrKeyReleased(evt);
            }
        });
        getContentPane().add(txtIsr, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 332, 104, -1));

        txtAnticipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAnticiposActionPerformed(evt);
            }
        });
        txtAnticipos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAnticiposKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnticiposKeyTyped(evt);
            }
        });
        getContentPane().add(txtAnticipos, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 329, 120, -1));

        lblAnticipos.setText("Anticipos Concedidos:");
        getContentPane().add(lblAnticipos, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 309, -1, -1));

        lblDescuentosJ.setText("Descuentos Judiciales:");
        getContentPane().add(lblDescuentosJ, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 309, -1, -1));

        txtDescuentosJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescuentosJActionPerformed(evt);
            }
        });
        txtDescuentosJ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDescuentosJKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescuentosJKeyTyped(evt);
            }
        });
        getContentPane().add(txtDescuentosJ, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 329, 120, -1));

        lblOtrosDescuentos.setText("Otros Descuentos:");
        getContentPane().add(lblOtrosDescuentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(601, 309, 120, -1));

        txtOtrosDescuentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOtrosDescuentosActionPerformed(evt);
            }
        });
        txtOtrosDescuentos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtOtrosDescuentosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOtrosDescuentosKeyTyped(evt);
            }
        });
        getContentPane().add(txtOtrosDescuentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(601, 329, 120, -1));

        lblCalculodeIngresos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCalculodeIngresos.setText("Calculo de Ingresos");
        getContentPane().add(lblCalculodeIngresos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 161, -1, -1));

        lblCalculodeDescuentos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCalculodeDescuentos.setText("Calculo de Descuentos");
        getContentPane().add(lblCalculodeDescuentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 277, -1, -1));

        lblTotalDescuentos.setText("Total Descuentos:");
        getContentPane().add(lblTotalDescuentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 379, -1, -1));

        txtTotalDescuentos.setEditable(false);
        getContentPane().add(txtTotalDescuentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 402, 120, -1));

        lblTotalDescuentos1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTotalDescuentos1.setText("Sueldo Líquido:");
        getContentPane().add(lblTotalDescuentos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 378, -1, -1));

        txtSueldoLiquido.setEditable(false);
        txtSueldoLiquido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        getContentPane().add(txtSueldoLiquido, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 399, 169, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 509, 1957, -1));

        lblFormadePago.setText("Forma de Pago:");
        getContentPane().add(lblFormadePago, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 379, -1, -1));

        cmbxFormadePago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", "Cheque" }));
        getContentPane().add(cmbxFormadePago, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 402, 120, -1));

        TbPreNomina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Departamento", "Puesto", "Nombre", "Sueldo Base", "Comisiones", "Bonificaciones Extra", "Bonificación Incentivo", "Sueldo Devengado", "IGSS", "ISR", "Anticipos Concedidos", "Descuentos Judiciales", "Otros Descuentos", "Total Descuentos", "Sueldo Líquido", "Forma de Pago"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TbPreNomina);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 522, 1937, 203));

        lblIngreseNum1.setText("Ingrese números");
        getContentPane().add(lblIngreseNum1, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 242, 120, -1));

        lblIngreseNum2.setText("Ingrese números");
        getContentPane().add(lblIngreseNum2, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 242, 120, -1));

        lblIngreseNum.setText("Ingrese números");
        getContentPane().add(lblIngreseNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 150, -1, -1));

        lblIngreseNum4.setText("Ingrese números");
        getContentPane().add(lblIngreseNum4, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 358, 120, -1));

        lblIngreseNum5.setText("Ingrese números");
        getContentPane().add(lblIngreseNum5, new org.netbeans.lib.awtextra.AbsoluteConstraints(601, 358, 120, -1));

        IngresarEmpleado.setText("Ingresar Empleado a Nómina");
        IngresarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IngresarEmpleadoActionPerformed(evt);
            }
        });
        getContentPane().add(IngresarEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 440, 230, 38));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("*Si el empleado no tiene algun ingreso o descuento, coloque un 0 en la casilla.");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 83, -1, -1));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 220, -1, -1));

        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(Limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 440, 110, 38));

        advertencia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        advertencia.setText("ADVERTENCIA: No todos los campos están llenos");
        getContentPane().add(advertencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 480, 270, -1));

        lblIngreseNum6.setText("Ingrese números");
        getContentPane().add(lblIngreseNum6, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 358, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtComisionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtComisionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtComisionesActionPerformed

    private void txtBonificacionesExtraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBonificacionesExtraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBonificacionesExtraActionPerformed

    private void txtBonificacionIncentivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBonificacionIncentivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBonificacionIncentivoActionPerformed

    private void txtSueldoDevengadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSueldoDevengadoActionPerformed

    }//GEN-LAST:event_txtSueldoDevengadoActionPerformed

    private void txtIgssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIgssActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIgssActionPerformed

    private void txtIsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIsrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIsrActionPerformed

    private void txtAnticiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAnticiposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAnticiposActionPerformed

    private void txtDescuentosJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescuentosJActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescuentosJActionPerformed

    private void txtOtrosDescuentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOtrosDescuentosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOtrosDescuentosActionPerformed

        /**
     * Condiciona para que el usuario pueda escribir solamente números.
     */
    private void txtComisionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComisionesKeyTyped
        // TODO add your handling code here:
        char validar=evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            lblIngreseNum1.setVisible(true);
        }
        else{
            lblIngreseNum1.setVisible(false);
        }
    }//GEN-LAST:event_txtComisionesKeyTyped
        /**
     * Condiciona para que el usuario pueda escribir solamente números.
     */
    private void txtBonificacionesExtraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBonificacionesExtraKeyTyped
        // TODO add your handling code here:
                char validar=evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            lblIngreseNum2.setVisible(true);
        }
        else{
            lblIngreseNum2.setVisible(false);
        }
    }//GEN-LAST:event_txtBonificacionesExtraKeyTyped
        /**
     * Condiciona para que el usuario pueda escribir solamente números.
     */
    private void txtAnticiposKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnticiposKeyTyped
        // TODO add your handling code here:
                char validar=evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            lblIngreseNum.setVisible(true);
        }
        else{
            lblIngreseNum.setVisible(false);
        }
    }//GEN-LAST:event_txtAnticiposKeyTyped
        /**
     * Condiciona para que el usuario pueda escribir solamente números.
     */
    private void txtDescuentosJKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentosJKeyTyped
        // TODO add your handling code here:
                char validar=evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            lblIngreseNum4.setVisible(true);
        }
        else{
            lblIngreseNum4.setVisible(false);
        }
    }//GEN-LAST:event_txtDescuentosJKeyTyped
        /**
     * Condiciona para que el usuario pueda escribir solamente números.
     */
    private void txtOtrosDescuentosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtrosDescuentosKeyTyped
        // TODO add your handling code here:
                char validar=evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            lblIngreseNum5.setVisible(true);
        }
        else{
            lblIngreseNum5.setVisible(false);
        }
    }//GEN-LAST:event_txtOtrosDescuentosKeyTyped
        /**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtSueldoBaseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSueldoBaseKeyReleased

        String strSueldoBase=txtSueldoBase.getText();
        String strComisiones=txtComisiones.getText();
        String strBonificacionesExtra=txtBonificacionesExtra.getText();
        String strBonificacionIncentivo=txtBonificacionIncentivo.getText();
        
        if(strSueldoBase.equals("")==false&&strBonificacionIncentivo.equals("")==false){
            //CALCULO DE SUELDO DEVENGADO
//CONVERSION DE STRING A DOUBLE
        double dbSueldoBase = Double.parseDouble(txtSueldoBase.getText());
        double dbComisiones = Double.parseDouble(txtComisiones.getText());
        double dbBonificacionesExtra = Double.parseDouble(txtBonificacionesExtra.getText());
        double dbBonificacionIncentivo = Double.parseDouble(txtBonificacionIncentivo.getText());
       
        
        //CALCULO DE SUELDO DEVENGADO
       double dbSueldoDevengado=dbSueldoBase+dbComisiones+dbBonificacionesExtra+dbBonificacionIncentivo;
       dbSueldoDevengado=Math.round(dbSueldoDevengado*100)/100d;
       //CONVERSION DE DOUBLE A STRING
       String strSueldoDevengado = String.valueOf(dbSueldoDevengado);
       //IMPRESIÓN EN PANTALLA
       txtSueldoDevengado.setText(strSueldoDevengado);
       
       //CALCULO DE DESCUENTOS
       
//IGSS
       double dbIgss=dbSueldoBase*0.0483;
       //CONVERSION DE DOUBLE A STRING
       dbIgss=Math.round(dbIgss*100)/100d;
       String strIgss=String.valueOf(dbIgss);
       //IMPRESION EN PANTALLA
       txtIgss.setText(strIgss);
       
//ISR
       double dbIsr;
       if(dbSueldoBase<6000){
           dbIsr=0;
           txtIsr.setText("0");
       }
       else{
           //CALCULO TOTAL INGRESOS
           double dbSueldoAnual=dbSueldoBase*12;
           double dbBonificacionIncentivoAnual=dbBonificacionIncentivo*12;
           double dbIngresoAnual=dbSueldoAnual+dbBonificacionIncentivoAnual;
           //CALCULO TOTAL DESCUENTOS
           double dbIgssAnual=dbIgss*12;
           double dbDescuentoAnual=dbIgssAnual+48000;
           //CALCULO RENTA BRUTA
           double dbRentaBruta=dbIngresoAnual-dbDescuentoAnual;
           //CALCULO ISR ANUAL
           double dbIsrAnual=dbRentaBruta*0.05;
           //CALCULO ISR MENSUAL
           dbIsr=dbIsrAnual/12;
           //CONVERSION DE DOUBLE A STRING
           String strIsr=String.valueOf(dbIsr);
           dbIsr=Math.round(dbIsr*100)/100d;
           //IMPRESION EN PANTALLA
           txtIsr.setText(strIsr);
       }
       
        }
    }//GEN-LAST:event_txtSueldoBaseKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtComisionesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtComisionesKeyReleased

        String strSueldoBase=txtSueldoBase.getText();
        String strComisiones=txtComisiones.getText();
        String strBonificacionesExtra=txtBonificacionesExtra.getText();
        String strBonificacionIncentivo=txtBonificacionIncentivo.getText();
        
        if(strSueldoBase.equals("")==false&&strBonificacionIncentivo.equals("")==false){
            //CALCULO DE SUELDO DEVENGADO
//CONVERSION DE STRING A DOUBLE
        double dbSueldoBase = Double.parseDouble(txtSueldoBase.getText());
        double dbComisiones = Double.parseDouble(txtComisiones.getText());
        double dbBonificacionesExtra = Double.parseDouble(txtBonificacionesExtra.getText());
        double dbBonificacionIncentivo = Double.parseDouble(txtBonificacionIncentivo.getText());
       
        
        //CALCULO DE SUELDO DEVENGADO
       double dbSueldoDevengado=dbSueldoBase+dbComisiones+dbBonificacionesExtra+dbBonificacionIncentivo;
       dbSueldoDevengado=Math.round(dbSueldoDevengado*100)/100;
       //CONVERSION DE DOUBLE A STRING
       String strSueldoDevengado = String.valueOf(dbSueldoDevengado);
       //IMPRESIÓN EN PANTALLA
       txtSueldoDevengado.setText(strSueldoDevengado);
       
       //CALCULO DE DESCUENTOS
       
//IGSS
       double dbIgss=dbSueldoBase*0.0483;
       //CONVERSION DE DOUBLE A STRING
       dbIgss=Math.round(dbIgss*100)/100;
       String strIgss=String.valueOf(dbIgss);
       //IMPRESION EN PANTALLA
       txtIgss.setText(strIgss);
       
//ISR
       double dbIsr;
       if(dbSueldoBase<6000){
           dbIsr=0;
       }
       else{
           //CALCULO TOTAL INGRESOS
           double dbSueldoAnual=dbSueldoBase*12;
           double dbBonificacionIncentivoAnual=dbBonificacionIncentivo*12;
           double dbIngresoAnual=dbSueldoAnual+dbBonificacionIncentivoAnual;
           //CALCULO TOTAL DESCUENTOS
           double dbIgssAnual=dbIgss*12;
           double dbDescuentoAnual=dbIgssAnual+48000;
           //CALCULO RENTA BRUTA
           double dbRentaBruta=dbIngresoAnual-dbDescuentoAnual;
           //CALCULO ISR ANUAL
           double dbIsrAnual=dbRentaBruta*0.05;
           //CALCULO ISR MENSUAL
           dbIsr=dbIsrAnual/12;
           //CONVERSION DE DOUBLE A STRING
           String strIsr=String.valueOf(dbIsr);
           dbIsr=Math.round(dbIsr*100)/100;
           //IMPRESION EN PANTALLA
           txtIsr.setText(strIsr);
       }
        }
    }//GEN-LAST:event_txtComisionesKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtBonificacionesExtraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBonificacionesExtraKeyReleased

        String strSueldoBase=txtSueldoBase.getText();
        String strComisiones=txtComisiones.getText();
        String strBonificacionesExtra=txtBonificacionesExtra.getText();
        String strBonificacionIncentivo=txtBonificacionIncentivo.getText();
        
        if(strSueldoBase.equals("")==false&&strBonificacionIncentivo.equals("")==false){
            //CALCULO DE SUELDO DEVENGADO
//CONVERSION DE STRING A DOUBLE
        double dbSueldoBase = Double.parseDouble(txtSueldoBase.getText());
        double dbComisiones = Double.parseDouble(txtComisiones.getText());
        double dbBonificacionesExtra = Double.parseDouble(txtBonificacionesExtra.getText());
        double dbBonificacionIncentivo = Double.parseDouble(txtBonificacionIncentivo.getText());
       
        
        //CALCULO DE SUELDO DEVENGADO
       double dbSueldoDevengado=dbSueldoBase+dbComisiones+dbBonificacionesExtra+dbBonificacionIncentivo;
       dbSueldoDevengado=Math.round(dbSueldoDevengado*100)/100d;
       //CONVERSION DE DOUBLE A STRING
       String strSueldoDevengado = String.valueOf(dbSueldoDevengado);
       //IMPRESIÓN EN PANTALLA
       txtSueldoDevengado.setText(strSueldoDevengado);
       
       //CALCULO DE DESCUENTOS
       
//IGSS
       double dbIgss=dbSueldoBase*0.0483;
       //CONVERSION DE DOUBLE A STRING
       dbIgss=Math.round(dbIgss*100)/100d;
       String strIgss=String.valueOf(dbIgss);
       //IMPRESION EN PANTALLA
       txtIgss.setText(strIgss);
       
//ISR
       double dbIsr;
       if(dbSueldoBase<6000){
           dbIsr=0;
       }
       else{
           //CALCULO TOTAL INGRESOS
           double dbSueldoAnual=dbSueldoBase*12;
           double dbBonificacionIncentivoAnual=dbBonificacionIncentivo*12;
           double dbIngresoAnual=dbSueldoAnual+dbBonificacionIncentivoAnual;
           //CALCULO TOTAL DESCUENTOS
           double dbIgssAnual=dbIgss*12;
           double dbDescuentoAnual=dbIgssAnual+48000;
           //CALCULO RENTA BRUTA
           double dbRentaBruta=dbIngresoAnual-dbDescuentoAnual;
           //CALCULO ISR ANUAL
           double dbIsrAnual=dbRentaBruta*0.05;
           //CALCULO ISR MENSUAL
           dbIsr=dbIsrAnual/12;
           //CONVERSION DE DOUBLE A STRING
           String strIsr=String.valueOf(dbIsr);
           dbIsr=Math.round(dbIsr*100)/100d;
           //IMPRESION EN PANTALLA
           txtIsr.setText(strIsr);
       }
        }

    }//GEN-LAST:event_txtBonificacionesExtraKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtIgssKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIgssKeyReleased

        String strIgss=txtIgss.getText();
        String strIsr=txtIsr.getText();
        String strAnticipos=txtAnticipos.getText();
        String strDescuentosJ=txtDescuentosJ.getText();
        String strOtrosDescuentos=txtOtrosDescuentos.getText();
        
        if(strIgss.equals("")==false){

//CONVERSION DE STRING A DOUBLE
        double dbIgss = Double.parseDouble(txtIgss.getText());
        double dbIsr = Double.parseDouble(txtIsr.getText());
        double dbAnticipos = Double.parseDouble(txtAnticipos.getText());
        double dbDescuentosJ = Double.parseDouble(txtDescuentosJ.getText());
        double dbOtrosDescuentos=Double.parseDouble(txtOtrosDescuentos.getText());
       
        
        //CALCULO DE TOTAL DESCUENTOS
       double dbTotalDescuentos=dbIgss+dbIsr+dbAnticipos+dbDescuentosJ+dbOtrosDescuentos;
       dbTotalDescuentos=Math.round(dbTotalDescuentos*100)/100d;
       //CONVERSION DE DOUBLE A STRING
       String strTotalDescuentos = String.valueOf(dbTotalDescuentos);
       //IMPRESIÓN EN PANTALLA
       txtTotalDescuentos.setText(strTotalDescuentos);

       //CALCULO DE SUELDO LIQUIDO
       //CONVERSION DE STRING A DOUBLE
       double dbIngresos = Double.parseDouble(txtSueldoDevengado.getText());
       
       double dbSueldoLiquido=dbIngresos-dbTotalDescuentos;
       //CONVERSION DE DOUBLE A STRING
       dbSueldoLiquido=Math.round(dbSueldoLiquido*100)/100d;
       String strSueldoLiquido=String.valueOf(dbSueldoLiquido);
       //IMPRESION EN PANTALLA
       txtSueldoLiquido.setText(strSueldoLiquido);

        }
    }//GEN-LAST:event_txtIgssKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtIsrKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIsrKeyReleased
String strIgss=txtIgss.getText();
        String strIsr=txtIsr.getText();
        String strAnticipos=txtAnticipos.getText();
        String strDescuentosJ=txtDescuentosJ.getText();
        String strOtrosDescuentos=txtOtrosDescuentos.getText();
        
        if(strIgss.equals("")==false){

//CONVERSION DE STRING A DOUBLE
        double dbIgss = Double.parseDouble(txtIgss.getText());
        double dbIsr = Double.parseDouble(txtIsr.getText());
        double dbAnticipos = Double.parseDouble(txtAnticipos.getText());
        double dbDescuentosJ = Double.parseDouble(txtDescuentosJ.getText());
        double dbOtrosDescuentos=Double.parseDouble(txtOtrosDescuentos.getText());
       
        
        //CALCULO DE TOTAL DESCUENTOS
       double dbTotalDescuentos=dbIgss+dbIsr+dbAnticipos+dbDescuentosJ+dbOtrosDescuentos;
       dbTotalDescuentos=Math.round(dbTotalDescuentos*100)/100d;
       //CONVERSION DE DOUBLE A STRING
       String strTotalDescuentos = String.valueOf(dbTotalDescuentos);
       //IMPRESIÓN EN PANTALLA
       txtTotalDescuentos.setText(strTotalDescuentos);

       //CALCULO DE SUELDO LIQUIDO
       //CONVERSION DE STRING A DOUBLE
       double dbIngresos = Double.parseDouble(txtSueldoDevengado.getText());
       
       double dbSueldoLiquido=dbIngresos-dbTotalDescuentos;
       //CONVERSION DE DOUBLE A STRING
       dbSueldoLiquido=Math.round(dbSueldoLiquido*100)/100d;
       String strSueldoLiquido=String.valueOf(dbSueldoLiquido);
       //IMPRESION EN PANTALLA
       txtSueldoLiquido.setText(strSueldoLiquido);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtIsrKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtAnticiposKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnticiposKeyReleased
String strIgss=txtIgss.getText();
        String strIsr=txtIsr.getText();
        String strAnticipos=txtAnticipos.getText();
        String strDescuentosJ=txtDescuentosJ.getText();
        String strOtrosDescuentos=txtOtrosDescuentos.getText();
        
        if(strIgss.equals("")==false){

//CONVERSION DE STRING A DOUBLE
        double dbIgss = Double.parseDouble(txtIgss.getText());
        double dbIsr = Double.parseDouble(txtIsr.getText());
        double dbAnticipos = Double.parseDouble(txtAnticipos.getText());
        double dbDescuentosJ = Double.parseDouble(txtDescuentosJ.getText());
        double dbOtrosDescuentos=Double.parseDouble(txtOtrosDescuentos.getText());
       
        
        //CALCULO DE TOTAL DESCUENTOS
       double dbTotalDescuentos=dbIgss+dbIsr+dbAnticipos+dbDescuentosJ+dbOtrosDescuentos;
       dbTotalDescuentos=Math.round(dbTotalDescuentos*100)/100d;
       //CONVERSION DE DOUBLE A STRING
       String strTotalDescuentos = String.valueOf(dbTotalDescuentos);
       //IMPRESIÓN EN PANTALLA
       txtTotalDescuentos.setText(strTotalDescuentos);

       //CALCULO DE SUELDO LIQUIDO
       //CONVERSION DE STRING A DOUBLE
       double dbIngresos = Double.parseDouble(txtSueldoDevengado.getText());
       
       double dbSueldoLiquido=dbIngresos-dbTotalDescuentos;
       //CONVERSION DE DOUBLE A STRING
       dbSueldoLiquido=Math.round(dbSueldoLiquido*100)/100d;
       String strSueldoLiquido=String.valueOf(dbSueldoLiquido);
       //IMPRESION EN PANTALLA
       txtSueldoLiquido.setText(strSueldoLiquido);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtAnticiposKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtDescuentosJKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentosJKeyReleased
String strIgss=txtIgss.getText();
        String strIsr=txtIsr.getText();
        String strAnticipos=txtAnticipos.getText();
        String strDescuentosJ=txtDescuentosJ.getText();
        String strOtrosDescuentos=txtOtrosDescuentos.getText();
        
        if(strIgss.equals("")==false){

//CONVERSION DE STRING A DOUBLE
        double dbIgss = Double.parseDouble(txtIgss.getText());
        double dbIsr = Double.parseDouble(txtIsr.getText());
        double dbAnticipos = Double.parseDouble(txtAnticipos.getText());
        double dbDescuentosJ = Double.parseDouble(txtDescuentosJ.getText());
        double dbOtrosDescuentos=Double.parseDouble(txtOtrosDescuentos.getText());
       
        
        //CALCULO DE TOTAL DESCUENTOS
       double dbTotalDescuentos=dbIgss+dbIsr+dbAnticipos+dbDescuentosJ+dbOtrosDescuentos;
       dbTotalDescuentos=Math.round(dbTotalDescuentos*100)/100d;
       //CONVERSION DE DOUBLE A STRING
       String strTotalDescuentos = String.valueOf(dbTotalDescuentos);
       //IMPRESIÓN EN PANTALLA
       txtTotalDescuentos.setText(strTotalDescuentos);

       //CALCULO DE SUELDO LIQUIDO
       //CONVERSION DE STRING A DOUBLE
       double dbIngresos = Double.parseDouble(txtSueldoDevengado.getText());
       
       double dbSueldoLiquido=dbIngresos-dbTotalDescuentos;
       //CONVERSION DE DOUBLE A STRING
       dbSueldoLiquido=Math.round(dbSueldoLiquido*100)/100d;
       String strSueldoLiquido=String.valueOf(dbSueldoLiquido);
       //IMPRESION EN PANTALLA
       txtSueldoLiquido.setText(strSueldoLiquido);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescuentosJKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     * El KeyReleased mantiene actualizados los JTextField que requieren de los datos para hacer calculos automáticos.
     */
    private void txtOtrosDescuentosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOtrosDescuentosKeyReleased
String strIgss=txtIgss.getText();
        String strIsr=txtIsr.getText();
        String strAnticipos=txtAnticipos.getText();
        String strDescuentosJ=txtDescuentosJ.getText();
        String strOtrosDescuentos=txtOtrosDescuentos.getText();
        
        if(strIgss.equals("")==false){

//CONVERSION DE STRING A DOUBLE
        double dbIgss = Double.parseDouble(txtIgss.getText());
        double dbIsr = Double.parseDouble(txtIsr.getText());
        double dbAnticipos = Double.parseDouble(txtAnticipos.getText());
        double dbDescuentosJ = Double.parseDouble(txtDescuentosJ.getText());
        double dbOtrosDescuentos=Double.parseDouble(txtOtrosDescuentos.getText());
       
        
        //CALCULO DE TOTAL DESCUENTOS
       double dbTotalDescuentos=dbIgss+dbIsr+dbAnticipos+dbDescuentosJ+dbOtrosDescuentos;
       dbTotalDescuentos=Math.round(dbTotalDescuentos*100)/100d;
       //CONVERSION DE DOUBLE A STRING
       String strTotalDescuentos = String.valueOf(dbTotalDescuentos);
       //IMPRESIÓN EN PANTALLA
       txtTotalDescuentos.setText(strTotalDescuentos);

       //CALCULO DE SUELDO LIQUIDO
       //CONVERSION DE STRING A DOUBLE
       double dbIngresos = Double.parseDouble(txtSueldoDevengado.getText());
       
       double dbSueldoLiquido=dbIngresos-dbTotalDescuentos;
       //CONVERSION DE DOUBLE A STRING
       dbSueldoLiquido=Math.round(dbSueldoLiquido*100)/100d;
       String strSueldoLiquido=String.valueOf(dbSueldoLiquido);
       //IMPRESION EN PANTALLA
       txtSueldoLiquido.setText(strSueldoLiquido);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtOtrosDescuentosKeyReleased

    private void cmbxDepartamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxDepartamentoActionPerformed

    }//GEN-LAST:event_cmbxDepartamentoActionPerformed
/**
     * Llena la tabla NombreEmpleado cuando se ingresa a Generación de Planilla según los empleados en el archivo.
     */
    private void cmbxNombreEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxNombreEmpleadoActionPerformed
        // TODO add your handling code here:
        int registros=1000;
        String partes[]=new String[3];
        String dato=null;
        String nombre=null;
        FileReader fr; 
        try {
            fr = new FileReader("Puestos.txt");
            BufferedReader bf=new BufferedReader(fr);
           for(int i=0;i<registros;i++){
            String datoe= bf.readLine();
            cmbxPuesto.addItem(datoe);
            i=i++;
           } 
            
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
        

       
    }//GEN-LAST:event_cmbxNombreEmpleadoActionPerformed

    private void cmbxNombreEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbxNombreEmpleadoKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmbxNombreEmpleadoKeyReleased
/**
     * Condiciona para que el usuario pueda escribir solamente números.
     */
    private void txtSueldoBaseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSueldoBaseKeyTyped
        // TODO add your handling code here:
                char validar=evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            lblIngreseNum.setVisible(true);
        }
        else{
            lblIngreseNum.setVisible(false);
        }

    }//GEN-LAST:event_txtSueldoBaseKeyTyped

    private void txtSueldoBaseInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtSueldoBaseInputMethodTextChanged
      // TODO add your handling code here:
    }//GEN-LAST:event_txtSueldoBaseInputMethodTextChanged
/**
     * Llena la tabla NombreEmpleado cuando se ingresa a Generación de Planilla según los empleados en el archivo.
     */
    private void cmbxNombreEmpleadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbxNombreEmpleadoKeyPressed
        // TODO add your handling code here:
                FileReader fr;
        int registros=1000; 
        String nombrecombo="";
        nombrecombo=(String)cmbxNombreEmpleado.getSelectedItem();
       
         try {
            fr = new FileReader("Sueldos.txt");
            BufferedReader bf=new BufferedReader(fr);
           for(int i=0;i<registros;i++){
            String datox= bf.readLine();
            String partes[]=datox.split(" ");
            

                for(int j=0;j<1;j++){               
                String nombresueldo=partes[0]+" "+partes[1];
                
                
                if(nombresueldo==nombrecombo){
                    txtSueldoBase.setText(partes[2]);
                }
            j++;
            
            }
               
            i++;
           }
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }  
    }//GEN-LAST:event_cmbxNombreEmpleadoKeyPressed
/**
     * Ingresa al empleado en el JTable y en un archivo llamado Nomina, donde se guarda un registro de respaldo.
     */
    private void IngresarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IngresarEmpleadoActionPerformed
        // TODO add your handling code here:       
        String departamento="", puesto="", nombre="", sueldo="", comisiones="", bonificacionesextra="", incentivo="", sueldodevengado="";
        String igss="", isr="", anticipos="", descuentosj="", otrosdescuentos="", totaldescuentos="", liquido="", formapago="";
        if(sueldo!=""&&comisiones!=""&&bonificacionesextra!=""&&anticipos!=""&&descuentosj!=""&&totaldescuentos!=""){
        advertencia.setVisible(false);
        departamento=(String)cmbxDepartamento.getSelectedItem();
        puesto=(String)cmbxPuesto.getSelectedItem();
        nombre=(String)cmbxNombreEmpleado.getSelectedItem();
        sueldo=txtSueldoBase.getText();
        comisiones=txtComisiones.getText();
        bonificacionesextra=txtBonificacionesExtra.getText();
        incentivo=txtBonificacionIncentivo.getText();
        sueldodevengado=txtSueldoDevengado.getText();
        igss=txtIgss.getText();
        isr=txtIsr.getText();
        anticipos=txtAnticipos.getText();
        descuentosj=txtDescuentosJ.getText();
        otrosdescuentos=txtOtrosDescuentos.getText();
        totaldescuentos=txtTotalDescuentos.getText();
        liquido=txtSueldoLiquido.getText();
        formapago=(String)cmbxFormadePago.getSelectedItem();
        
        FileWriter escritura = null;
        PrintWriter pw = null;
        try
        {
            escritura = new FileWriter("Nomina.txt");
            pw = new PrintWriter(escritura);

            for (int i = 0; i < 10; i++)
                pw.println(departamento+" "+puesto+" "+nombre+" "+sueldo+" "+comisiones+" "+bonificacionesextra+" "+incentivo+" "+sueldodevengado+" "+igss+" "+isr+" "+anticipos+" "+descuentosj+" "+otrosdescuentos+" "+totaldescuentos+" "+liquido+" "+formapago);

        } catch (Exception e) {
            
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != escritura)
              escritura.close();
           } catch (Exception e2) {
              
           }
        }
       } else{
           advertencia.setVisible(true);
       }
        
        //IMPRESION EN TABLA
        
    
    }//GEN-LAST:event_IngresarEmpleadoActionPerformed

    private void txtSueldoBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSueldoBaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSueldoBaseActionPerformed
/**
     * Luego de ingresar un empleado limpia los JTextField para poder ingresar un nuevo empleado.
     */
    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        // TODO add your handling code here:
        txtSueldoBase.setText("");
        txtComisiones.setText("");
        txtBonificacionesExtra.setText("");
        txtSueldoDevengado.setText("");
        
        txtIgss.setText("");
        txtIsr.setText("0");
        txtAnticipos.setText("");
        txtDescuentosJ.setText("");
        txtOtrosDescuentos.setText("");
        txtTotalDescuentos.setText("");
        txtSueldoLiquido.setText("");
        
    }//GEN-LAST:event_LimpiarActionPerformed

    /**
     * @param args the command line arguments
     */

    /**
     * @param args the command line arguments
     */

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Generación_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Generación_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Generación_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Generación_Nomina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Generación_Nomina().setVisible(true);
            }
        });
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton IngresarEmpleado;
    private javax.swing.JButton Limpiar;
    private javax.swing.JTable TbPreNomina;
    private javax.swing.JLabel advertencia;
    private javax.swing.JComboBox<String> cmbxDepartamento;
    private javax.swing.JComboBox<String> cmbxFormadePago;
    private javax.swing.JComboBox<String> cmbxNombreEmpleado;
    private javax.swing.JComboBox<String> cmbxPuesto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAnticipos;
    private javax.swing.JLabel lblBonificacionIncentivo;
    private javax.swing.JLabel lblBonificacionesExtra;
    private javax.swing.JLabel lblCalculodeDescuentos;
    private javax.swing.JLabel lblCalculodeIngresos;
    private javax.swing.JLabel lblComisiones;
    private javax.swing.JLabel lblDepartamento;
    private javax.swing.JLabel lblDescuentosJ;
    private javax.swing.JLabel lblFormadePago;
    private javax.swing.JLabel lblGeneraciondePlanilla;
    private javax.swing.JLabel lblIgss;
    private javax.swing.JLabel lblIngreseNum;
    private javax.swing.JLabel lblIngreseNum1;
    private javax.swing.JLabel lblIngreseNum2;
    private javax.swing.JLabel lblIngreseNum4;
    private javax.swing.JLabel lblIngreseNum5;
    private javax.swing.JLabel lblIngreseNum6;
    private javax.swing.JLabel lblIngresodeDatos;
    private javax.swing.JLabel lblIsr;
    private javax.swing.JLabel lblNombreEmpleado;
    private javax.swing.JLabel lblOtrosDescuentos;
    private javax.swing.JLabel lblPuesto;
    private javax.swing.JLabel lblSueldoBase;
    private javax.swing.JLabel lblSueldoDevengado;
    private javax.swing.JLabel lblTotalDescuentos;
    private javax.swing.JLabel lblTotalDescuentos1;
    private javax.swing.JTextField txtAnticipos;
    private javax.swing.JTextField txtBonificacionIncentivo;
    private javax.swing.JTextField txtBonificacionesExtra;
    private javax.swing.JTextField txtComisiones;
    private javax.swing.JTextField txtDescuentosJ;
    private javax.swing.JTextField txtIgss;
    private javax.swing.JTextField txtIsr;
    private javax.swing.JTextField txtOtrosDescuentos;
    private javax.swing.JTextField txtSueldoBase;
    private javax.swing.JTextField txtSueldoDevengado;
    private javax.swing.JTextField txtSueldoLiquido;
    private javax.swing.JTextField txtTotalDescuentos;
    // End of variables declaration//GEN-END:variables
}
